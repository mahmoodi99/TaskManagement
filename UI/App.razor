@using UI.ServiceHttp
@inject ILocalStorageService _localStorageService;
@inject ILoginUserService _apiLogic
@inject AuthenticationStateProvider _authStateProvider
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <text>Please wait, we are authorizint the user.</text>
                </Authorizing>
                <NotAuthorized>
                    <text> You are not authorized to access this page. </text>
                </NotAuthorized>
            </AuthorizeRouteView>

        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
               
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {
    private async Task OnNavigateAsync(NavigationContext args)
    {
        var auth = await _localStorageService.GetItem<string>("isauthenticated");
        var user = (await (_authStateProvider as CustomAuthStateProvider)
        .GetAuthenticationStateAsync()).User;

        if (!string.IsNullOrEmpty(auth) && !user.Identity.IsAuthenticated)
        {
            var response = await _apiLogic.UserProfileAsync();
            if (response.Message == "Success")
            {
                (_authStateProvider as CustomAuthStateProvider)
                .SetAuthInfo(response.UserProfile);
            }
            else if (response.Message == "Unauthorized")
            {
                await _localStorageService.RemoveItem("isauthenticated");
            }
        }
    }
}